# Regular Expressions
Regular expressions are a powerful part of data analysis, and they're sort of a little weird at the same time, but they're also mysterious and magical and mystical. And so they are something that you can kind of impress your friends with and once you know regular expressions, you can use them in lots of places. And so what regular expressions are is they came out of some stuff in the '60s and the '70s having to do with programming languages that were all about strings. And the analysis of strings and languages and formal languages and these kinds of things, the kind of thing you'd study like when you build a compiler in computer science. And regular expressions are one form of languages that can be specified.
Play video starting at ::48 and follow transcript0:48
All that hardly matters, but what matters is that it's a text-based programming language that you use little characters instead of the word if. You can have loops, you can have if statements, you can have all kinds of stuff and pull stuff out. And it's for working with strings. And it's basically wildcards but it's also just matching but also parsing. And it's used lots of places. Like if you use like Linux, you can use commands like grep, which stands for generalized regular expression parsing, where regular expression are the r and e.
Play video starting at :1:18 and follow transcript1:18
Every programming language, JavaScript, PHP, Java, they all have it, and there are some subtle differences across implementations. Just one language would pick a thing and then they would add a couple of cool features. Another language would sort of start doing and they would add different cool features. So there's kind of this core of regular expressions that are common and then there are sort of extra features that are implemented differently, not all things implement them the same. So Postgres uses one particular regular expression, I think Postgres in a sense came to regular expressions late, and so they just like picked like a very conservative set of regular expressions. So if at first you don't understand regular expressions, they seem to make no sense,
Play video starting at :2:5 and follow transcript2:05
it's okay, that's normal. They're actually kind of fun and it's like learning a new programming language. So just if you learned Python and then you learned SQL, there's like a whole different way of looking at the world when you learn SQL they're both programming languages in a sense. Regular expressions are yet another programming language and the implicit thing that regular expressions are doing is looking through a string and doing things. Searching for things, pulling things out, searching for one thing, then search another thing after that. And it's a very compact language. And it's fun on Stack Overflow to say, find me a regular expression that pulls out email addresses. That one, of course, is pretty easy, but there's a lot to learn so. So there is a xkcd comic for everything. This one is talking about regular expressions kind of in perl a little bit.
Play video starting at :2:54 and follow transcript2:54
And basically the story line is, there is a whole bunch of data that has to be searched for email addresses and someone types perl and a couple characters of regular expressions and then searches all the data and away it goes. So you can go see that on xkcd. One thing I like about xkcd is that it's accessible and so you can feed the accessible version of it. And I believe in this slide if you grab the slides I got the accessible version of the narrative there. So here's our little regular expression what I call a quick guide and this is like the keywords of a programming language. So caret is not just a caret, it matches the beginning of the line. Dollar sign matches the end of the line. Dot is a wildcard character which some wildcard systems like Linux or DOS use asterisk as a wildcard character. In this language, asterisk means we're going to repeat a character. There is greedy and non-greedy, which we won't cover too much here. There's plus, which is one or more characters. There is a series of bracket expressions which are single characters. That's a set. So [aeiou] is either an a or an e or an i or an o or a u. And then if you put a caret at the beginning of the bracket expression, you see how this is a programming language? If you put a character, that's any character other than capital X, capital Y, or Capital Z. And then you can even have ranges, so you can have [a-z0-9], that's lowercase letters and numbers. Then parentheses, which we'll talk about in a bit. When you have this big search thing and you don't want to pull it all out if you're extracting from a string, use the parentheses to kind of mark the parts of that the matching expression that you want to actually extract. You'll see it when we get to an example, so come back to this. So the documentation in Postgres is really good, I'm not going to repeat it here. I just encourage you to go take a look. They've got all of the sort of regular expression things and really simple regular expression examples. And I'm not going to go through them again, I just I really like how Postgres documents it. They document it without going overboard and without going sort of not enough. So here are the basic WHERE clause operators, which is what we're going to use. There's the tilde, so ~ is matches. Which again, does this string match this regular expression? So regular expression either matches yes or no.
Play video starting at :5:22 and follow transcript5:22
You can say you want your matches to be case-insensitive, !~ says anything but the match. And then !~* says it does not match case-insensitive. Okay? So when I first started looking at this I'm like why didn't you use the word regex or something? But you know, hey regular expressions are cryptic and so these little operators are cryptic too so. Now it's a little bit different than the LIKE that we've talked about before. So if we say tweet ~ 'UMSI', the key to a regular expression is if it has a string, it's going to sort of run that expression along the string, check for a match, check for a match, check for a match. It's more of a for loop. Whereas and you're not matching the whole string, you're matching a substring, That's the tilde operator, the regular expression match operator. If you're using the LIKE operator, which is actually part of standard SQL, you have to put a wildcard character at the beginning and the end. So %UMSI% says, I want to match UMSI anywhere in the line. Whereas in regular expression, when you say find me UMSI, it implies that it's going to kind of work across all the characters of the column before it decides if it matches or not. So there's an implicit loop in these things.
Play video starting at :6:43 and follow transcript6:43
So here's a bit of data that I put in just sort of so that we can play with it. And we start out by building the simplest regular expression. It functions like LIKE, right? And so it functions like LIKE. We use the tilde operator, and so this basically takes the email and in a sense it slides the umich across each of those columns. And sometimes it matches and it finds a match here, sometimess gets to the end and there's no match. So that basically says, I would like to see the ones where if I slide umich along this line I want those and I don't want the ones that don't have umich in them. And so it's kind of like a WHERE clause, it's like a LIKE but with percents at the beginning and the end. Again, implicitly in regular expressions there is a loop, it's moving it along the way. So here is our first, and I won't go into too much detail on all these because again, there's a lot of good documentation. But just to give you a sense of how this programming language works. So this umich basically says, I'm going to slide umich along each thing, right? But here I add a special character, so in this case, I'm adding the caret. So what that says is I am looking for situations where the email address starts with the letter c, meaning this matches the beginning of a column and that means c. And so now we have grounded the match to be at the beginning of it and you could, right? And so ^c basically is going to say, this one, this one, csev and Colleen and the other ones don't match. I could do something like, say, m$ as my match and then that would hook this instead of going across the whole line, it connects it to the end of the line. And so now the ones that end in m are those apple.com ones and the other ones don't match. And so all I'm trying to point out is these things here are functioning as like calling ends with or starts with or something. And so you basically are writing code by controlling the regular expression. You can't do everything in regular expression, but you can do a lot of stuff with the regular expression. So here's a thing where I do the dollar sign, and I basically say select where they end in $. So it's edu that regular expression that's going to slide but then because of the dollar sign it's locked to the end of the string.
Play video starting at :9:13 and follow transcript9:13
And then we're looking here for this is matching the first character. If it was inside the brackets, the caret matches the first character. If it's inside the brackets it would not, but it's outside so it means first character. It's a programming language, right? And then we have a bracket pair and this is the letter g or the letter n or the letter t. So what this is saying, ^[gnt], is I am looking for email addresses that start with g or n or t lowercase. I could've had that ignore case. And so g, n, or t, where's g, n, or t? n, g, and t, so that's going to match these three, and there we are. It matches those three. All right, here's the ones that match with a dollar edu, edu at the end. So you get the idea. Again, I'm not going to go in super great detail. This shows a range. And so I'm saying I would like, any time you see bracket you've got to remember that's one character. That's 0 through 9. 0 1 2 3 4 5 6 7 8 9. And remember that this regular expression is slid across the whole thing. So what this is really looking for is having a single digit anywhere in the email. And so then we go ted79 and glenn1 match because both of them have a digit. Then I can tweak it a little more and I say, you know what, I want a two-digit sequence. So now I have [0-9] [0-9] that says one digit immediately followed by another digit. I could put something in here like .* and that would say one digit followed by any number of characters followed by another digit, right? So there's all kind of fun things that you could do here. And so what this does is this finds me in this case two digits. Again, it's searching, it's moving that two-digit matcher down the string and it finds two digits next to each other in ted79@umuc.edu. So these are super simple regular expressions that are very basic and you will have a lot of fun as you learn more about regular expressions. So up next we're going to talk about how we then, that was the WHERE clause, how you pick things. Now, we're going to take and pull stuff out of columns by using regular expressions.

# Using Regular Expressions
We just got done using where clauses and regular expressions to pick which rows to show. Now, what we're going to do is we're going to actually do stuff with the columns that come back from those rows, so we're actually parsing the results. Now, in general, if you just need the whole column, you just select email and away you go, but basically, we can then also use regular expressions to parse the columns. If we take a look at this first thing, we see we're going to select substring of email, and so this can be select email. Here's a where clause, just like we did before. But basically, what we're going to do here is we're going to actually pull out those digits. This is read that email address and find zero through nine, which is digits, so that bracket zero through nine is a digit and then we have this plus. Now this plus is a modifier that modifies that, and that's one or more. If you put a star, there'd be zero or more which would match everything because zero or more digits is everywhere. Plus means one or more digits. But it also is going to be greedy in that it's one or more contiguous digits. If there were like a string that had like one, two and a string that had three, four and a string that had five, six, it would get the first one. We'll talk in a second how you get the second one, but in this case, it gets the first one. You see that 79 from one of the email address is in one and so this actually you can see this is pushing out and expanding and like find me all the numbers that are contiguous.
Play video starting at :1:40 and follow transcript1:40
Then we can do a much more complex one. This is a way to pull the domain name out of an email address, and so this one takes a little bit of explaining. If you go back to your cheat sheet matches any character, plus is a modifier that matches that. That says that means any character, one or more of those characters followed by an at sign. What that does is if there is something here and then at sign, it's a way of scanning up till the moment that you find the at sign. Then what we have is the parentheses character. The parentheses character says start extraction here, start extraction at the character after the at sign. Dot star means any character as many times as you want [inaudible] Then chop that out, and then dollar is the end of the line. This literally stated basically says scan the line delay find an at sign and then give me everything from the at sign to the end of the line. That's what this regular expression says. It's awesome, and again, if you just got to look at these things. Remember the plus modifies the one before it, and the star modifies the one before it. Parentheses the start, at sign is just a character, dollar sign is the end of the line. The only thing that's really just a character that's not programming in this whole thing is the at sign. That's basically, how to pull the domain name off of an email address column. You can do that in Python, and I'm sure you have done that in Python if, especially if you've taken one of my classes. But here's how you do it in regular expressions. You can actually use this exact same regular expression in Python, and if you took my Python class. But I'm for everybody, you actually saw this example which I borrowed liberally from Python for everybody. This one here is pretty much the same. It is adding a distinct, so that now that basically says all of the domains of all the email address is from this database. That's what that's doing. I could even say an order by. We'll do some order buying here. That's the same regular expression that basically says go up to the asterisks, start extracting, extract all the way to the end of the line. Now, we can do other things. Now, this one here that you'll see is a little ugly. I'll just tell you that this part here email from that email from that and all the places it says email, those are identical. I couldn't put that like in a variable or something, so just think of that as like gets us this email address from a column of email. What we're going to do is we're going to select, pull up the email address, and then we're going to count each email address. Then we're going to do a group by this same thing, which is that domain name and the email. You can almost think of this as domain name. We're going to select it, I'm going to count them, and then we're going to use a group by, of this same thing. This is a variation on distinct except that when it's taking the apple.com and it turns out that there's two of them, it remembers that were two of them. Uiuc.edu, it remembers that there are one UMUC that remembers there one and there were two umich.edu addresses. You can put these in various parts of the select statement. That looks a little cryptic by the time it's all said and done, but it runs just fine once the database engine can take a look at that. Now, that was, remember, I said that if there's a 1, 2, 3, 4, everything I've shown you so far is going to pull the first one out and ignore all the rest. It could be 5,6, right? So it ignores the rest of them. Sometimes you want to get all of the matches. The substring call gets the first match in a text column, ignoring the other matches, even if the regular expression would match more than one. But we can get an array of matches which is different than a column. It's like an array that you get when you do a select statement. We use the function regexp_matches, which basically says, it looks pretty much the same as a substring, is just now I want all the matches instead of whatever. You have to in your code do something a little bit differently when you've received these. The application that we're going to do is hashtags. We're just going to be looking. We put some hashtags in like these might be tweets or whatever. We have hashtags and then we're going to take a look at how to pull these hashtags out. Here's our tweets with lots of hashtag in them. We can put this in a where clause, but this is exactly what we did before, where it was like okay, find all the tweets that have hashtags in them or the hashtag SQL. So this one goes through and finds SQL, finds SQL. We could've done that with a light clause if we wanted to and we don't see the one here that says UMSI Python. That's just a where clause. That is something that we did before. Now we're going to use regular regexp_matches. Let's take a look at the code. Pound sign. That's just a character. Parentheses says start extraction, other parentheses says end extraction. Then we have a set. This equals one character. Inside it are what the logit characters are. Capital letters, lowercase letters, and numbers, and underscores. We've decided that's what our tweets or our hashtags are, is a pound sign, followed by then at least one, the plus means at least one, upper, lower numbers, and underscores. That's what we're matching. But what we've done is we've said regexp_match, and that means go across the line and find it and because we didn't put the pound sign in the parenthesis, I could have put the parenthesis outside it. You'll see in the matches, we don't get the pound sign. Again, that was my choice. I could have done it either way, but I just wanted the tags without the pound signs. That is the list of tags and if we can use select distinct, G means all way across, that's all the way across. We do a select distinct, we remove all of the tags in this database, there they are and we've removed any duplicates. But then we can also do things like say, okay, I want to select an edition. This is the same. In addition, I want to know what the primary key of the tweet is that had that particular thing in it. Tweet 1 has SQL and FUN, tweet 2 has SQL and UMSI and tweet 3 has UMSI and Python. This would be a thing that you could then do something with, but you basically extract it and expand it and kept track of which tweet you're in. Who knows what you're doing with this, but that's the thing that you can do. The main thing we talked about here is this regexp_matches, which goes across the whole line, grabbing as many times as this pattern can be fit to that line. Then giving you an array of all the things where they matched. That sums up this set of string manipulation lectures. I'm going to do a code demo where I do one of my favorite examples of reading three email addresses, parsing email addresses, and calculating counts of things, and we're going to do it all in SQL. Some of you who may have taken my class online or others that use my book see, I have done this in Python with dictionaries and lists and tuples and sorting, etc and we're going to do it all in one or two statements with SQL in this particular demo. So I'll cover that demo. This is a tantalizing look into it. We're going to actually read a file. We're going to pull it all in as flat text lines in a database and then we're going to run some regular expressions. We're going to use a where clause to pick the right lines and then we're going to do some group buys, and order buys. When it's all said and done, we're going to end up with a list of e-mail addresses and counsel at times those people sent the e-mail. We're going to do it two ways: We'll do it with and without a select statement. We'll take a look at some of the performance implications and why it is that you don't want to use a select statement.

# Demonstration: Regular Expressions
Hello, and welcome to another walkthrough of SQL. We're going to play a little bit about with regular expressions. So I assume that you've watched the lecture on regular expressions. So I'm just going to sort of tell you what each one of these does. So I'm going to make an email table with just some text in it. I'm going to insert some email addresses in it. SELECT star FROM em is my table, FROM, so there we go. So we have a few things that we can look at. So let's take a look at some of these queries. So this tilde is a regular expression. It's kind of like LIKE but it's the regular expression one, so the difference is that this basically is going to take this umich and move it across the entire sort of match it moving across. And so anything that has a umich in it anywhere is going to match this one, you don't to put wildcards at the beginning and end, like you do on a LIKE clause. So that's really saying select where there is anywhere in the email address, there is a umich email address. The caret is the start, so that basically says select anything that starts with a letter c. So csev and coleen, of course, do. Then select something. the dollar sign is a metacharacter that says, show me everything that ends with dollar sign. So that has all the edu ones, so there's apple.com and apple.com. So the bracket is a single character that's a set. So what this is saying is, I want to see at the beginning of the line something that starts with g or n or t, that's what the brackets are. Okay? It's a set of possible characters.
Play video starting at :1:56 and follow transcript1:56
So there we go. The g or the n or the t is what we got. So, now we can look for any digit. So you can inside brackets, you can have a range. So 0-9 is a range. And again, it's still going to check every character, like is this a number, is this a number, is this a number, and then it finds it. So it'll find the ones that have a number in them anywhere.
Play video starting at :2:23 and follow transcript2:23
And it finds this one. If I have bracket 0 through 9, bracket 0 through 9 as my regular expression, that says two digits right next to each other. But anywhere in the file. So that says this is ted79. That was a two-digit one, Before, we did a one-digit number anywhere in the email. So glenn1 matched, but if I want a two-digit number, away I go. Okay? So that's just sort of a review of some of the basics that we can do. Now, you can also take the email and run it through a regular expression. So this is just a WHEREe clause, right? But what we're doing is we're going to actually instead of just showing the email address, we are going to pull things out of the email addresses. And so, let's just show you this, it's kind of cool. And then, it's actually pulling the number out, right? SELECT substring email FROM quote 0 through 9 plus. So here we go, 0 through 9 is any digit, plus means one or more of them, kind of one or more of them. And what's happening here is email is the whole email address. But what we're doing is with this FROM inside the parentheses, it's different than saying which table it is, that's this FROM. FROM inside the parentheses says look, apply this regular expression and extract from email that fraction of this, that portion that matches 0 through 9 plus. So that gives us the 79 and it gives us the 1. So, this is in a WHERE clause, right, where email is got matches this regular expression, and then you can also do it in the results of the SELECT.
Play video starting at :4:7 and follow transcript4:07
Now, you can also use parentheses. So what this is saying here is we're going to take the email and we're going to run it through a regular expression. And now in this regular expression is dot plus, which means any character one or more times, followed by an at sign. And then parentheses means start extracting and then dot star means zero or more characters, followed by stop extracting, followed by the end of the string. So what that really is saying is that's saying, go up to and start extracting after the at sign and go all the way to the end of the string. So that's how we've got umich.edu, we just got all the email addresses, right? So, the email is everything but we were able to go up to the at sign, start extracting, and then end extracting at the end of the string, and so we can get the email addresses, Pretty cool, huh?
Play video starting at :5:11 and follow transcript5:11
You can also just throw a DISTINCT. This is a perfect like example of DISTINCT. It's really just these rows, exact rows that you get without DISTINCT, except that the duplicates are now removed. So we go from six rows with two duplicates to four rows with no duplicates. And that's exactly what the SELECT DISTINCT does, and that's really awesome. The SELECT_DISTINCT is like, yep, just show me the unique ones. Just like in DISTINCT, we can do a GROUP BY. Now, this looks a little bit complex where we're seeing, but you'll just notice that the substring email has to be repeated over and over and over again. We're going to pull out the domain name, then we're going to count the domain names, and we're going to do a GROUP BY the domain name. I wish there was a way to make that a shortcut, but there's not really an easy way to make that a shortcut. But you will see here that what we're going to get is we are going to get the number of times, this is going each of these domains is going to be used. So remember that a GROUP BY and a count is kind of like a DISTINCT except it's keeping track of the ones that it throws away. So at one umich, but it's like that means the count is 2, so that's pretty cool.
Play video starting at :6:34 and follow transcript6:34
Okay, and you can put the substring in the WHERE clause as well, so we can say, SELECT star FROM em where the substring email FROM is blah, blah, blah, blah, blah This whole email from ".+@(.* that's basically saying in the WHERE clause, we're going to do the substring extraction and then match that to umich.edu.
Play video starting at :7: and follow transcript7:00
So there we go, and we can see the id, okay? So that is playing with regular expressions and email addresses. Let's go and play with tags a little bit. Tags is this notion that you have these pound sign strings, and we're going to make a little table of tweets, not too many tweets. We got three little tweets with five little tags, so we can see our our tweets.
Play video starting at :7:29 and follow transcript7:29
There's three little tweets and five tags. So we can of course use regular expressions that says, find #SQL anywhere in tweet tilde #SQL. So that's you're finding the tweet. That's really just a WHERE clause, right? That's nothing different than what we did before. But then inside the SELECT, you basically could say, I would like to take this tweet column from the Twitter, the tw table, and run this match. And so it's a pound sign. This is a regular expression. A pound sign followed by start of extraction followed by in braces a through z, lowercase a through z, 0 through 9, and underscore. So that's our legitimate letters, plus means we have to have one or more of those characters and then we stop extracting. So when we run out of, which in this case it will be the blank, it will start here, we'll go grab #SQL, and the blank will stop us, because blank is not in this set of characters that we are doing. g means do it more than once and then you're going to see that this sort of expands because some of these have more than one. And so this regexp_matches creates sort of some virtual rows. So this even though there's only three tweets, we get one sort of virtual row because regexp_matches sort of expands. And if we we can use SELECT_DISTINCT on that one as well, so that sort of takes our six tags and knocks her down to four tags because there are some duplicates. But we can also then hook back on here if we don't do the DISTINCT, we can hook back on the id of the row it came in and you can sort of see the mapping of which actual tweet. So tweet 1 has SQL and FUN, tweet 2 has SQL and UMSI, and tweet 3 has UMSI and PYTHON. So that gives you a little bit of regular expressions. Regular expressions are themselves a study. And so, you'll learn regular expressions probably as much from Stack Overflow as anything else.

# Demonstration: Flat files, Regex, Email
Hello and welcome to another SQL walkthrough. So we're going to now grab a flat file, that's just a flat text file, and read through it as if we are going to, we're going to load it into a database. We're going to make one column, put each line in the column. So we're going to make a line, we'll create a table called mbox and we're going to read it in as a line of text, right? And so the data we're going to look at is from my Python for Everybody class, the mailbox short. And we're going to be reading through these records and we're going to use things like regular expressions to pull things out of these records. So we're going to write SQL that's just kind of like reading a flat file. So a SELECT is going to read this whole thing. But first we've got to get it loaded in. And so there's a couple ways that we could get this loaded in, we could do a wget, we could pull it down into our local directory, and then we would copy from mbox_short.txt this file off our home, our local directory. And with this delimiter. And so what's going on here is naturally the copy reads this line by line, but we actually don't want to split it. We want the entire line, all the way from the beginning to the end, to be into one column. So it's going to split by newlines. And so what you pick is you pick in this case, we don't want it to split. So we're going to say, we're not going to use delimiters at all. So we're going to use a delimiter of a bell. And that's a character that doesn't appear anywhere in this file.
Play video starting at :1:34 and follow transcript1:34
And so I could do that, but I want to do something even more awesome. I want to say copy mbox, which means load mbox, FROM PROGRAM, right? And we are going to run wget. And these are some parameters. This is quiet, and this is the send the output to the standard out and this at sign is an extra parameter and then that says retrieve all this stuff and feed it, in the background, into copy and with delimiter E007. So let's go ahead and just run that one. Oops, come back.
Play video starting at :2:13 and follow transcript2:13
So that did it. It loaded it, it pulled it off the Internet and then put it right into mbox. So I can say SELECT star FROM mbox LIMIT 5. Of course, it wouldn't hurt if I could type SELECT right.
Play video starting at :2:31 and follow transcript2:31
So there we are. There's our five rows, our first five rows of it. And it's just this exact thing stuck in. Now we could do tricky stuff. We could pull things out and we could create foreign keys for some of these things, but for now, we're just going to play with it from a regular expression perspective. So, let's take a look at all the lines in the mbox where line is starts with the letter From and a blank.
Play video starting at :3:3 and follow transcript3:03
So that showing these things. There are 27 rows and that's the actual lines that start with From and blank. And so that was one. We can ask, we can say, you know what, I don't just want the line. I would like you to scan up to the first at sign and then go up to the next space.
Play video starting at :3:25 and follow transcript3:25
So what we're going to do is we're going to pull out this email address. And so what we're going to do is we're going to look for the substring line. So line is the whole thing and we're going to look and pull out the entire email address right there. Okay? And so we're going to look for, we're going to pass the line through the following regular expression. We're going to look for a blank, start extracting, then any character one or more times followed by an at sign, followed by anything but a blank. So this is a bracket, so it's a single character, but the caret in the beginning is not. So that's not a blank. Plus appends to that and says one or more times, and the parentheses says stop extracting, followed by a blank. And so this is we're going to apply this to the lines that start with From space. So we're going to pull out the email address from each of those lines. And so now we've got the email address and we're using regular expressions. Okay, this is kind of a mess because this whole little substring line where we're extracting the email address. We got to repeat it a couple times, because we're going to do a GROUP BY. And we're going to group by, in effect, the entire email address, and we're going to order by the count of the email addresses. We're going to select the email address and the count of the email address. It's kind of like running SELECT DISTINCT, but counting the ones as you're throwing them away. WHERE line is like From, starts with a From space, GROUP BY the email address, ORDER BY the count of the email address descending, right?
Play video starting at :5:7 and follow transcript5:07
So let's run that and it is going to make us a count. Look at that, Chen Wen, like in Python for Everybody, Chen Wen is five times, appears five times. And so she had five email messages in the first month or so of 2008 in the Sakai project, which is where this all came from. Okay? And so we can do the same kind of thing by, if we really wanted to not repeat the substring line and regular expression. We could have done this as a sub-select. So this here is this string, but there's no SELECT DISTINCT, so that's all of them. So you could think of this sub-select as producing a one-column table, right? So that sub-select produces a one-column table. And then what I can do is get the email and then count the email, again, this is like a virtual table, from the sub-select. GROUP BY email ORDER BY count email DESC. So this is a more succinct way to say it because I'm not replacing. I'm not repeating the substring over and over and over again. So this is going to give me that same count but, most developer database folks will tell you don't use sub-select if you don't have to, and what I would say is, don't use sub-select in online things and you can use sub-select in data mining applications as long as you don't have to wait too long for them to run. If it's the difference between four seconds and six seconds, as long as you've got to run it not too often, you're probably okay. So there you go. We've turned this flat text file. We retrieved it automatically right on the copy, turned it into a bunch of rows, one column, and then we played with it with regular expressions. Hope it helps. Cheers.